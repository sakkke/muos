# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  deploy-docs:
    docker:
      - image: cimg/python:3.10-node
    steps:
      - checkout
      - run:
          name: "Install Poetry"
          command: "pip install poetry"
      - run:
          name: "Install Netlify CLI"
          command: "npm --prefix=./tools/netlify-cli install --dev"
      - run:
          name: "Install dependencies"
          command: "poetry install --extras=docs"
      - run:
          name: "Generate documents"
          command: "make docs"
      - run:
          name: "Deploy to Netlify"
          command: "npm --prefix=./tools/netlify-cli exec -- netlify deploy --prod"
  deploy-docs-draft:
    docker:
      - image: cimg/python:3.10-node
    steps:
      - checkout
      - run:
          name: "Install Poetry"
          command: "pip install poetry"
      - run:
          name: "Install Netlify CLI"
          command: "npm --prefix=./tools/netlify-cli install --dev"
      - run:
          name: "Install dependencies"
          command: "poetry install --extras=docs"
      - run:
          name: "Generate documents"
          command: "make docs"
      - run:
          name: "Deploy to Netlify"
          command: "npm --prefix=./tools/netlify-cli exec -- netlify deploy"
  install-sh:
    machine:
      image: ubuntu-2204:2022.07.1
    steps:
      - checkout
      - run:
          name: "Install Poetry"
          command: "pip install poetry"
      - run:
          name: "Install dependencies"
          command: "poetry install"
      - run:
          name: "Create an empty 2GB file"
          command: "fallocate --length 2G ./muosdev"
      - run:
          name: "Find a loopback device"
          command: "losetup --find ./muosdev"
      - run:
          name: "Run install.sh"
          command: "poetry run ./install.py"
  make-archiso:
    machine:
      image: ubuntu-2204:2022.07.1
    steps:
      - run:
          name: "Download the bootstrap tarball"
          command: "curl https://geo.mirror.pkgbuild.com/iso/2022.09.03/archlinux-bootstrap-x86_64.tar.gz | sudo tar --directory=/tmp --extract --file=- --gzip --numeric-owner"
      - run:
          name: "Initialize pacman keyring"
          command: "sudo /tmp/root.x86_64/bin/arch-chroot /tmp/root.x86_64 pacman-key --init"
      - run:
          name: "Populate pacman keyring"
          command: "sudo /tmp/root.x86_64/bin/arch-chroot /tmp/root.x86_64 pacman-key --populate"
  publish-test-pypi:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: "Install Poetry"
          command: "pip install poetry"
      - run:
          name: "Install poetry-dynamic-versioning"
          command: "poetry self add poetry-dynamic-versioning"
      - run:
          name: "Install dependencies"
          command: "poetry install"
      - run:
          name: "Register test-pypi"
          command: "poetry config repositories.test-pypi https://test.pypi.org/legacy/"
      - run:
          name: "Register API token"
          command: "poetry config pypi-token.test-pypi $TEST_PYPI_TOKEN"
      - run:
          name: "Deploy to TestPyPI"
          command: "poetry publish --build --repository=test-pypi"
  run-tests:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: "Install Poetry"
          command: "pip install poetry"
      - run:
          name: "Install dependencies"
          command: "poetry install --extras=test"
      - run:
          name: "Run tests"
          command: "make test"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  install-sh-workflow:
    jobs:
      - install-sh
  make-archiso-workflow:
    jobs:
      - make-archiso
  run-tests-workflow:
    jobs:
      - run-tests
      - deploy-docs-draft:
          requires:
            - run-tests
      - deploy-docs:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - run-tests
      - publish-test-pypi:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - run-tests
